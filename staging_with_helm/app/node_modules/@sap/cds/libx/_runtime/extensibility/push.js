const fs = require('fs')
const path = require('path')
const cds = require('../cds')

const activate = require('./activate')
const { validateExtension } = require('./validation')
const { collectFiles, getCompilerError, exists } = require('./utils')
const { packTarArchive, unpackTarArchive } = require('../../../lib/utils/resources')

const TEMP_DIR = fs.realpathSync(require('os').tmpdir())

const _compileProject = async function (extension, req) {
  let csn, root
  try {
    root = await fs.promises.mkdtemp(`${TEMP_DIR}${path.sep}extension-`)
    await unpackTarArchive(extension, root)
    csn = await cds.compile(collectFiles(root, ['.cds', '.json']), { flavor: 'parsed' })
    if (csn.requires) delete csn.requires
  } catch (err) {
    if (err.messages) req.reject(400, getCompilerError(err.messages))
    else throw err
  } finally {
    if (await exists(root)) {
      await (fs.promises.rm || fs.promises.rmdir)(root, { recursive: true, force: true })
    }
  }

  return csn
}

const base = async function (req) {
  const cdsFiles = cds.resolve('*').filter(f => f.startsWith(cds.root) && !f.includes('node_modules'))
  const csvObj = await cds.deploy.resources()
  const csvFiles = Object.keys(csvObj).filter(f => f.startsWith(cds.root) && !f.includes('node_modules'))
  const i18nFiles = collectFiles(cds.root, ['.properties'])
  if (req._.res) req._.res.set('content-type', 'application/octet-stream; charset=binary')

  return packTarArchive([...cdsFiles, ...csvFiles, ...i18nFiles], cds.root)
}

const push = async function (req) {
  let { extension } = req.data
  if (!extension || !extension.data) req.reject(400, 'Missing extension')
  const csn = await _compileProject(extension.data, req)
  if (!csn) req.reject(400, 'Missing or bad extension')
  const tenant = req.tenant
  await validateExtension(csn, tenant, req)

  const ID = cds.utils.uuid()
  await cds.tx({ tenant }, async tx => {
    await tx.run(
      INSERT.into('cds.xt.Extensions').entries([
        { ID, csn: JSON.stringify(csn), sources: extension.data, activated: 'database' }
      ])
    )
  })

  await activate(ID, null, tenant)
}

module.exports = { base, push }
