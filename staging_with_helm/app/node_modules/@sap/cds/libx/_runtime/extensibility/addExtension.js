const cds = require('../cds')

const { validateCsn, validateExtensionFields, validateExtension } = require('./validation')
const handleDefaults = require('./defaults')
const resolveViews = require('./views')

const _getCsn = req => {
  const csn = {
    extensions: req.data.extensions.map(ext => JSON.parse(ext))
  }

  return csn
}

const _addAnnotation = extension => {
  Object.values(extension.elements).forEach(el => {
    el['@cds.extension'] = true
  })
}

const _addViews = csn => {
  csn.extensions.forEach(extension => {
    const target = cds.model.definitions[extension.extend]
    const views_ = []
    const view = resolveViews(target, views_)
    extension.extend = view && view.name
    _addAnnotation(extension)

    // All projection views leading to the db entity are extended with back pack in case view columns are explicitly listed.
    // The views using projections with '*' obtain the back pack automatically.
    views_.forEach(view => {
      if (!view.projection || (view.projection.columns && !view.projection.columns.some(col => col === '*'))) {
        csn.extensions.push({
          extend: view.name,
          columns: Object.keys(extension.elements).map(key => {
            return { ref: [key] }
          })
        })
      }
    })
  })
}

const _addExtension = async function (csn, req) {
  const tx = cds.tx(req)
  await tx.run(
    INSERT.into('cds.xt.Extensions').entries([
      { ID: cds.utils.uuid(), tag: 'uiflex', csn: JSON.stringify(csn), activated: 'propertyBag' }
    ])
  )

  // defaults
  for (const ext of req.data.extensions) {
    const extension = JSON.parse(ext)
    await handleDefaults(extension, tx, false)
  }
}

const addExtension = async function (req) {
  const csn = _getCsn(req)
  validateCsn(csn, req)
  validateExtensionFields(csn, req)
  _addViews(csn, cds)
  await validateExtension(csn, req.tenant, req)
  await _addExtension(csn, req)
}

module.exports = addExtension
