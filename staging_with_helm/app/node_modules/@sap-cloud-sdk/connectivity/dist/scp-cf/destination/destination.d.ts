import { Xor } from '@sap-cloud-sdk/util';
import { DestinationFetchOptions } from './destination-accessor-types';
import type { DestinationForServiceBindingOptions } from './destination-from-vcap';
import { AuthenticationType, Destination, DestinationCertificate } from './destination-service-types';
/**
 * Takes an existing or a parsed destination and returns an SDK compatible destination object.
 * @param destination - An object that adheres to the {@link Destination} interface.
 * @returns An SDK compatible destination object.
 */
export declare function sanitizeDestination(destination: Record<string, any>): Destination;
/**
 * Takes a JSON object returned by any of the calls to the destination service and returns an SDK compatible destination object.
 * This function only accepts destination configurations of type 'HTTP' and will error if no 'URL' is given.
 * TODO: Remove from public api in version 3. (Check if related types can also be removed from public api).
 * @param destinationJson - A JSON object returned by the destination service.
 * @returns An SDK compatible destination object.
 */
export declare function parseDestination(destinationJson: DestinationJson | DestinationConfiguration): Destination;
/**
 * @internal
 * Get additional headers and/or query parameters from a destination.
 * Destinations can specify additional headers and/or query parameters, that should be added to every request against the given destination.
 * They are specified in the following format:
 * `URL.headers.<header-name>` or `URL.queries.<query-parameter-name>`
 * @param destinationConfig - Original destination config that could include additional headers or query parameters.
 * @returns An object with either the headers or query parameters and their values, depending on the `originalKeyPrefix`.
 */
export declare function getAdditionalHeadersAndQueryParameters(destinationConfig: DestinationConfiguration): Pick<Destination, 'headers' | 'queryParameters'>;
/**
 * @internal
 * Get additional headers from a destination.
 * Destinations can specify additional headers, that should be added to every request against the given destination.
 * They are specified in the following format:
 * `URL.headers.<header-name>`
 * @param destinationConfig - Original destination config that could include additional headers.
 * @returns An object with either the headers or query parameters and their values, depending on the `originalKeyPrefix`.
 */
export declare function getAdditionalHeaders(destinationConfig: DestinationConfiguration): Pick<Destination, 'headers'>;
/**
 * @internal
 * Get additional query parameters from a destination.
 * Destinations can specify additional query parameters, that should be added to every request against the given destination.
 * They are specified in the following format:
 * `URL.queries.<query-parameter-name>`
 * @param destinationConfig - Original destination config that could include additional headers or query parameters.
 * @returns An object with either the headers or query parameters and their values, depending on the `originalKeyPrefix`.
 */
export declare function getAdditionalQueryParameters(destinationConfig: DestinationConfiguration): Pick<Destination, 'queryParameters'>;
/**
 * Transform Destination to strings containing destination information.
 * @param destination - Either destiatnation object or destinationName and Jwt.
 * @returns String containing information on the destination.
 */
export declare function toDestinationNameUrl(destination: DestinationOrFetchOptions): string;
/**
 * Transforms the upper case properties of the destination service response to lower case.
 * @internal
 * @param certificate - Response from the certificate endpoint of the destination service.
 * @returns The parsed Destination Certificate with lower case properties.
 */
export declare function parseCertificate(certificate: Record<string, any>): DestinationCertificate;
/**
 * Destination configuration alongside authtokens and certificates.
 */
export interface DestinationJson {
    [key: string]: any;
    destinationConfiguration: DestinationConfiguration;
    authTokens?: Record<string, string>[];
    certificates?: Record<string, string>[];
}
/**
 * Configuration of a destination as it is available through the destination service.
 */
export interface DestinationConfiguration {
    [key: string]: any;
    URL: string;
    Name?: string;
    ProxyType?: string;
    'sap-client'?: string;
    User?: string;
    Password?: string;
    Authentication?: AuthenticationType;
    TrustAll?: string;
    tokenServiceURL?: string;
    tokenServiceURLType?: 'Common' | 'Dedicated;';
    tokenServiceUsername?: string;
    tokenServicePass?: string;
    clientId?: string;
    clientSecret?: string;
    SystemUser?: string;
    Type?: 'HTTP' | 'LDAP' | 'MAIL' | 'RFC';
}
/**
 * @internal
 */
export declare function isDestinationConfiguration(destination: any): destination is DestinationConfiguration;
/**
 * @internal
 */
export declare function isDestinationJson(destination: any): destination is DestinationJson;
/**
 * @internal
 */
export declare function noDestinationErrorMessage(destination: DestinationOrFetchOptions): string;
/**
 * Type that is either a {@link Destination} or (XOR) {@link DestinationFetchOptions & DestinationForServiceBindingOptions}.
 */
export declare type DestinationOrFetchOptions = Xor<Destination, DestinationFetchOptions & DestinationForServiceBindingOptions>;
//# sourceMappingURL=destination.d.ts.map