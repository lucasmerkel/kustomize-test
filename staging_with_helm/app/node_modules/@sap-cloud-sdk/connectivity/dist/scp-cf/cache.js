"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cache = void 0;
/**
 * Representation of a cache to transiently store objects locally for faster access.
 * @typeparam T - Type of the cache entries.
 * @internal
 */
class Cache {
    constructor(validityTime) {
        this.cache = {};
        this.defaultValidityTime = validityTime;
    }
    /**
     * Clear all cached items.
     */
    clear() {
        this.cache = {};
    }
    /**
     * Specifies whether an entry with a given key is defined in cache.
     * @param key - The entry's key.
     * @returns A boolean value that indicates whether the entry exists in cache.
     */
    hasKey(key) {
        return this.cache.hasOwnProperty(key);
    }
    /**
     * Getter of cached entries.
     * @param key - The key of the entry to retrieve.
     * @returns The corresponding entry to the provided key if it is still valid, returns `undefined` otherwise.
     */
    get(key) {
        return key && this.hasKey(key) && !isExpired(this.cache[key])
            ? this.cache[key].entry
            : undefined;
    }
    /**
     * Setter of entries in cache.
     * @param key - The entry's key.
     * @param item - The entry to cache.
     */
    set(key, item) {
        var _a;
        if (key) {
            const expires = (_a = item.expires) !== null && _a !== void 0 ? _a : inferExpirationTime(this.defaultValidityTime);
            this.cache[key] = { entry: item.entry, expires };
        }
    }
}
exports.Cache = Cache;
function isExpired(item) {
    if (item.expires === undefined) {
        return false;
    }
    return item.expires < Date.now();
}
function inferExpirationTime(expirationTime) {
    return expirationTime
        ? inferExpirationTimeFromDate(expirationTime)
        : undefined;
}
function inferExpirationTimeFromDate(expirationTime) {
    var _a, _b, _c, _d;
    const currentDate = new Date();
    const milliseconds = ((_a = expirationTime === null || expirationTime === void 0 ? void 0 : expirationTime.hours) !== null && _a !== void 0 ? _a : 0) * 60 * 60 * 1000 +
        ((_b = expirationTime === null || expirationTime === void 0 ? void 0 : expirationTime.minutes) !== null && _b !== void 0 ? _b : 0) * 60 * 1000 +
        ((_c = expirationTime === null || expirationTime === void 0 ? void 0 : expirationTime.seconds) !== null && _c !== void 0 ? _c : 0) * 1000 +
        ((_d = expirationTime === null || expirationTime === void 0 ? void 0 : expirationTime.milliseconds) !== null && _d !== void 0 ? _d : 0);
    return currentDate
        .setMilliseconds(currentDate.getMilliseconds() + milliseconds)
        .valueOf();
}
//# sourceMappingURL=cache.js.map