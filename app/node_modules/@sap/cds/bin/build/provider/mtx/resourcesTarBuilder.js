const fs = require('fs')
const path = require('path')
const BuildTaskHandlerInternal = require('../buildTaskHandlerInternal')

const { BUILD_TASK_HANA } = require('../../constants')
const { WARNING, INFO } = require('../../buildTaskHandler')
const TAR_NAME = 'resources.tgz'

class ResourcesTarBuilder {
    constructor(handler) {
        this._handler = handler
    }

    async packTar(model) {
        let resourceRoot = await this._getHanaTenantDbDest()
        let files
        if (resourceRoot) {
            const hanaSrcFolder = path.join(resourceRoot, 'src')
            const undeployJson = path.join(resourceRoot, 'undeploy.json')

            // hana build task has already been executed
            files = BuildTaskHandlerInternal._find(resourceRoot, (res) => {
                if (res === undeployJson) {
                    return true
                }
                if (res.startsWith(hanaSrcFolder)) {
                    return true
                }
                return false
            })
        } else {
            resourceRoot = path.join(this._handler.buildOptions.root, this._handler.env.folders.db)
            const deploy = require('../../../../lib/deploy')
            files = Object.keys(await deploy.resources(model))
        }
        if (files.length > 0) {
            const { packTarArchive } = require('../../../../lib/utils/resources')
            return packTarArchive(files, resourceRoot, false)
        } else {
            this._handler.pushMessage("No deployment resources found - skip resource.tgz", WARNING)
        }
    }

    async writeTar(dest, model) {
        const buffer = await this.packTar(model)
        if (buffer) {
            await this._handler.write(buffer).to(path.join(dest, TAR_NAME))
        }
        await fs.promises.mkdir(dest, { recursive: true })
    }

    /**
     * Returns the build tasks of this project - either user defined or calculated by BuildTaskFactory.
     * A build task of type 'hana' is enforced in order to copy existing native hana artifacts later on.
     *
     * @returns {string} the src folder of the tenant db module
     */
    async _getHanaTenantDbDest() {
        const buildOptions = this._handler.buildOptions
        let hanaTask = buildOptions.tasks ? buildOptions.tasks.find(task => task.for === BUILD_TASK_HANA) : undefined
        if (!hanaTask) {
            this._handler.pushMessage(`Found SQLite database configuration. Ensure that productive cloud deployments requiring SAP HANA database are built with 'production' profile.`, INFO)
            return null
        }
        return hanaTask.dest
    }
}
module.exports = ResourcesTarBuilder
