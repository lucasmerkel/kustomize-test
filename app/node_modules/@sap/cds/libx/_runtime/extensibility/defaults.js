const cds = require('../cds')

const { ensureDraftsSuffix } = require('../common/utils/draft')
const resolveViews = require('./views')
const { EXT_BACK_PACK } = require('./utils')

const _needsQuotations = t => t instanceof cds.builtin.classes.string || t instanceof cds.builtin.classes.date

const _getDraftTable = view => {
  return cds.model.definitions[view]._isDraftEnabled ? ensureDraftsSuffix(view) : undefined
}

const handleDefaults = async (extension, tx, checkDb = true) => {
  const target = cds.model.definitions[extension.extend]
  const dbEntity = resolveViews(target).name

  if (checkDb && target.name !== dbEntity) return // only db entities

  const draft = _getDraftTable(extension.extend)
  const ext = Object.keys(extension.elements)
    .filter(key => extension.elements[key].default)
    .map(key => {
      const element = extension.elements[key]
      // .type as ui flex extensions are not linked
      const t = cds.model.definitions[element.type] || cds.builtin.types[element.type]
      const value = t && _needsQuotations(t) ? `"${element.default.val}"` : element.default.val
      return `"${key}":${value}`
    })

  if (ext.length !== 0) {
    const extStr = ext.join(',')
    const changed = `'{${extStr},' || substr(${EXT_BACK_PACK}, 2, length(${EXT_BACK_PACK})-1)`
    const assign = `${EXT_BACK_PACK} = CASE WHEN ${EXT_BACK_PACK} IS NULL THEN '{${extStr}}' ELSE ${changed} END`
    await tx.run(UPDATE(dbEntity).with(assign))
    if (draft) await tx.run(UPDATE(draft).with(assign))
  }
}

module.exports = handleDefaults
