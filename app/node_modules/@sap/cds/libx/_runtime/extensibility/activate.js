const cds = require('../cds')

const handleDefaults = require('./defaults')

const _calculateExtensions = async function (ID, tag, tenant) {
  let active, inactive
  await cds.tx({ tenant }, async tx => {
    if (tag || ID) {
      const inactiveCqn = SELECT.from('cds.xt.Extensions').where({ activated: 'propertyBag' })
      if (ID) {
        inactiveCqn.where('ID !=', ID)
      } else {
        inactiveCqn.where('tag !=', tag)
      }
      inactive = await tx.run(inactiveCqn)
      const activeCqn = SELECT.from('cds.xt.Extensions').where({ activated: 'database' })
      if (ID) {
        activeCqn.or({ ID })
      } else {
        if (tag) activeCqn.or({ tag })
      }
      active = await tx.run(activeCqn)
      if (inactive.length) {
        const deleteCqn = DELETE.from('cds.xt.Extensions').where(inactiveCqn.SELECT.where)
        await tx.run(deleteCqn)
      }
    } else {
      // activate all
      inactive = []
      active = await tx.run(SELECT.from('cds.xt.Extensions'))
    }
  })

  return { active, inactive }
}

const _restoreExtensions = async function (tenant, active, inactive) {
  await cds.tx({ tenant }, async tx => {
    // delete all extensions
    await tx.run(DELETE.from('cds.xt.Extensions'))
    // active
    active.forEach(row => {
      row.csn = row.csn.replace(/,"@cds.extension":true/g, '')
      row.activated = 'database'
      row.timestamp = '$now'
    })
    await tx.run(INSERT.into('cds.xt.Extensions').entries(active))
    // inactive
    if (inactive.length) {
      for (const na of inactive) {
        for (const extension of JSON.parse(na.csn).extensions) {
          await handleDefaults(extension, tx)
        }
      }
      await tx.run(INSERT.into('cds.xt.Extensions').entries(inactive))
    }
  })
}

const activate = async function (ID, tag, tenant) {
  const { active, inactive } = await _calculateExtensions(ID, tag, tenant)

  const { 'cds.xt.DeploymentService': ds } = cds.services
  await ds.extend(tenant)

  await _restoreExtensions(tenant, active, inactive)
}

module.exports = activate
