"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDestination = exports.useOrFetchDestination = void 0;
const destination_1 = require("./destination");
const destination_from_env_1 = require("./destination-from-env");
const destination_from_vcap_1 = require("./destination-from-vcap");
const destination_from_service_1 = require("./destination-from-service");
const destination_accessor_types_1 = require("./destination-accessor-types");
const destination_from_registration_1 = require("./destination-from-registration");
/**
 * Returns the parameter if it is a destination, calls {@link getDestination} otherwise (which will try to fetch the destination
 * from the Cloud Foundry destination service).
 *
 * Fetching a destination requires:
 * - A binding to exactly one XSUAA service instance with service plan "application".
 * - A binding to a destination service instance.
 *
 * If either of the prerequisites is not met or one of the services returns an error, this function will either throw an error or return a promise that rejects.
 * @param destination - A destination or the necessary parameters to fetch one.
 * @returns A promise resolving to the requested destination on success.
 */
async function useOrFetchDestination(destination) {
    return (0, destination_accessor_types_1.isDestinationFetchOptions)(destination)
        ? getDestination(destination)
        : (0, destination_1.sanitizeDestination)(destination);
}
exports.useOrFetchDestination = useOrFetchDestination;
/**
 * Builds a destination from one of three sources (in the given order):
 * - from the environment variable "destinations".
 * - from service bindings.
 * - from the destination service.
 *
 * If you want to get a destination only from a specific source, use the corresponding function directly
 * (`getDestinationFromEnvByName`, `destinationForServiceBinding`, `getDestinationFromDestinationService`).
 * @param options - The options to retrieve the destination.
 * @returns A promise returning the requested destination on success.
 */
async function getDestination(options) {
    const destination = (0, destination_from_env_1.searchEnvVariablesForDestination)(options) ||
        (await (0, destination_from_registration_1.searchRegisteredDestination)(options)) ||
        (await (0, destination_from_vcap_1.searchServiceBindingForDestination)(options)) ||
        (await (0, destination_from_service_1.getDestinationFromDestinationService)(options));
    return destination;
}
exports.getDestination = getDestination;
//# sourceMappingURL=destination-accessor.js.map