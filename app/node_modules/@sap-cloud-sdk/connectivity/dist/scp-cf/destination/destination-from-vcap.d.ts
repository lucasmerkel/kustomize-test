import { JwtPayload } from '../jsonwebtoken-type';
import { Destination } from './destination-service-types';
import type { DestinationFetchOptions } from './destination-accessor-types';
/**
 * @internal
 */
export interface PartialDestinationFetchOptions {
    useCache?: boolean;
    jwt?: JwtPayload;
}
/**
 * Tries to build a destination from a service binding with the given name.
 * Throws an error if no services are bound at all, no service with the given name can be found, or the service type is not supported.
 * The last error can be circumvent by using the second parameter to provide a custom function that transforms a service binding to a destination.
 * @param serviceInstanceName - The name of the service.
 * @param options - Options to customize the behavior of this function.
 * @returns A destination.
 * @internal
 */
export declare function destinationForServiceBinding(serviceInstanceName: string, options?: DestinationForServiceBindingsOptions & PartialDestinationFetchOptions): Promise<Destination>;
/**
 * Options to customize the behavior of [[destinationForServiceBinding]].
 * @internal
 */
export interface DestinationForServiceBindingsOptions {
    /**
     * Custom transformation function to control how a [[Destination]] is built from the given [[ServiceBinding]].
     */
    serviceBindingTransformFn?: ServiceBindingTransformFunction;
}
/**
 * Type of the function to transform the service binding.
 */
export declare type ServiceBindingTransformFunction = (serviceBinding: ServiceBinding, options?: PartialDestinationFetchOptions) => Promise<Destination>;
/**
 * Represents the JSON object for a given service binding as obtained from the VCAP_SERVICE environment variable.
 * To see service bindings, run `cf env <app-name>` in the terminal. This will produce output like this:
 * ```
 * {
 * ...
 *   "VCAP_SERVICES": {
 *     "s4-hana-cloud": [
 *       {
 *         "name": "...",
 *         "type": "...".
 *         ...
 *       }
 *     ]
 *   }
 * }
 * ```
 * In this example, the key "s4-hana-cloud" refers to an array of service bindings.
 */
export interface ServiceBinding {
    [key: string]: any;
    name: string;
    type: string;
}
/**
 * Options to customize the behavior of {@link destinationForServiceBinding}.
 */
export interface DestinationForServiceBindingOptions {
    /**
     * Custom transformation function to control how a {@link Destination} is built from the given {@link ServiceBinding}.
     */
    serviceBindingTransformFn?: (serviceBinding: ServiceBinding) => Promise<Destination>;
}
/**
 * @internal
 */
export declare function searchServiceBindingForDestination({ iss, jwt, serviceBindingTransformFn, destinationName, useCache }: DestinationFetchOptions & DestinationForServiceBindingsOptions): Promise<Destination | null>;
//# sourceMappingURL=destination-from-vcap.d.ts.map